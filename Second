
rhyme@ip-10-199-124-1:~$ mkdir yml
rhyme@ip-10-199-124-1:~$ cd yml
rhyme@ip-10-199-124-1:~/yml$ vi nginx_pod.yml
    (Content in the file)
apiversion: v1
kind: pod
metadata:
        name: my-nginx-pod
spec:
        containers:
                - name: my-nginx
                  image: nginx


rhyme@ip-10-199-124-1:~/yml$ sudo minikube start --vm-driver=none
rhyme@ip-10-199-124-1:~/yml$ sudo minikube start --vm-driver=none
\U0001f604  minikube v1.2.0 on linux (amd64)
\U0001f4a1  Tip: Use 'minikube start -p <name>' to create a new cluster, or 'minikube delete' to delete this one.
\U0001f504  Restarting existing none VM for "minikube" ...
\u231b  Waiting for SSH access ...
\U0001f433  Configuring environment for Kubernetes v1.15.0 on Docker 19.03.6
    \u25aa kubelet.resolv-conf=/run/systemd/resolve/resolv.conf
\U0001f504  Relaunching Kubernetes v1.15.0 using kubeadm ... 

\U0001f4a3  Error restarting cluster: running cmd: sudo kubeadm init phase certs all --config /var/lib/kubeadm.yaml: running command: sudo kubeadm init phase certs all --config /var/lib/kubeadm.yaml: exit status 1

\U0001f63f  Sorry that minikube crashed. If this was unexpected, we would love to hear from you:
\U0001f449  https://github.com/kubernetes/minikube/issues/new
rhyme@ip-10-199-124-1:~/yml$ 
sudo kubectl apply -f nginx_pod.yml
sudo kubectl get pods


create and deploy replication controller in your cluster
vi nginx_rc.yml
   (Content of the file)
apiversion: v1
kind: ReplicationController
metadata:
	name: my-nginx-rc
spec:
	replicas: 10
	selector: 
		app: nginx
	template:
		metadata:
			name: my-nginx-pod
			labels: 
				app: nginx
		spec:
			containers:
				- name: nginx
				  image: nginx


sudo kubectl apply -f nginx_rc.yml
sudo kubectl get rc
sudo kubectl get pods -l app=nginx
sudo kubectl delete pods -l app=nginx
sudo kubectl get pods -l app=nginx
sudo kubectl get rc


Enable access to an appication running in your pod through nodes

vi nginx_service.yml
  (Content of the file)
apiVersion: v1
kind: Service
metadata:
	name: my-nginx-service
spec:
	type: NodePort
	ports: 
		- port: 80
	selector: 
		app: nginx

sudo kubectl apply -f nginx_service.yml
sudo kubectl get svc
ifconfig


Create your first deployment in kubernetes cluster

vi nginx_deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
	name: nginx-deployment
spec:
	replicas: 5
	selector: 
		matchLabels:
			app: newnginx
	template:
		metadata: 
			labels:
				app: newnginx
		spec:
			containers:
				- name: my-nginx
				  image: nginx
				  ports:
					- containerPort: 80

sudo kubectl apply -f nginx_deployment.yml
sudo kubectl get deployment


Perform rolling updates and rollbacks in kubernetes

vi nginx_deployment.yml
vi nginx_service.yml

apiVersion: v1
kind: Service
metadata:
	name: my-nginx-service
spec:
	type: NodePort
	ports: 
		- port: 80
	selector: 
		app: newnginx

sudo kubectl apply -f nginx_service.yml
sudo kubectl get svc
vi nginx_deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
	name: nginx-deployment
spec:
	replicas: 5
	selector: 
		matchLabels:
			app: newnginx
	template:
		metadata: 
			labels:
				app: newnginx
		spec:
			containers:
				- name: my-nginx
				  image: anjucoursera1/nginxcourseraapp
				  ports:
					- containerPort: 80

sudo kubectl apply -f nginx_deployment.yml
sudo kubectl rollout history deploy nginx_deployment
sudo kubectl rollout rundo deploy nginx-deployment --to-revision=1
